# Quickstart Guide for SpriteAI

This guide will help you get started with SpriteAI, a rather brilliant library for generating game sprites and assets using AI.

## Installation

Install the SpriteAI package using npm, like so:

```bash
npm install sprite-ai
```

## Basic Setup

First, import SpriteAI in your project, quite straightforward:

```javascript
import { generateCharacterSpritesheet, generateEnvironmentSprites, generateItemSprites } from 'sprite-ai';
```

Make sure you have your OpenAI API key set as an environment variable, jolly important:

```bash
export OPENAI_API_KEY=your_api_key_here
```

## Generating Character Spritesheets

Generate a character spritesheet with default animation states, splendid:

```javascript
const result = await generateCharacterSpritesheet('medieval knight with armour and sword');

console.log(result.original); // URL to the original image
console.log(result.spritesheet); // Base64 encoded spritesheet
console.log(result.metadata); // Animation metadata
```

### Customizing Character Generation

You can customise the character spritesheet with various options, rather fancy:

```javascript
const customCharacter = await generateCharacterSpritesheet('cute cartoon bunny', {
  states: ['idle', 'hop', 'eat', 'sleep'],
  framesPerState: 4,
  size: '1024x1024',
  style: 'pixel-art',
  padding: 2,
  direction: 'left',
  save: true // Save to disk in ./assets/ folder
});
```

## Generating Environment Assets

Create environment sprites for your game, absolutely smashing:

```javascript
const environment = await generateEnvironmentSprites('forest with trees and bushes', {
  elements: 6,
  style: 'pixel-art',
  theme: 'fantasy',
  save: true
});

console.log(environment.tileset); // Base64 encoded tileset
console.log(environment.metadata); // Environment asset metadata
```

## Generating Item Sprites

Generate item sprites for your game, proper lovely:

```javascript
const items = await generateItemSprites('magic potions and scrolls', {
  itemCount: 6,
  style: 'pixel-art',
  itemType: 'consumables',
  background: 'transparent',
  save: true
});

console.log(items.itemSheet); // Base64 encoded item sheet
console.log(items.metadata); // Item metadata
```

## Working with Metadata

All sprite generation functions return metadata that you can use in your game engine, rather clever:

```javascript
const character = await generateCharacterSpritesheet('ninja warrior');

// Access animation data
const { states, framesPerState, totalFrames, dimensions, frameData } = character.metadata;

// Example: Setting up an animation in a game engine
for (const state in frameData) {
  const animation = frameData[state];
  console.log(`Animation state: ${state}`);
  console.log(`  Row: ${animation.row}`);
  console.log(`  Frames: ${animation.frames}`);
  console.log(`  Start frame: ${animation.startFrame}`);
  console.log(`  End frame: ${animation.endFrame}`);
}
```

## Saving Generated Assets

All sprite generation functions support saving the output to disk, quite handy:

```javascript
await generateCharacterSpritesheet('robot explorer', { save: true });
await generateEnvironmentSprites('desert landscape', { save: true });
await generateItemSprites('sci-fi weapons', { save: true });
```

Files are saved in the `./assets/` directory with names based on the description. Marvellous!

## Advanced Usage

### Fetching Available Animation States

Get a list of all available animation states, brilliant stuff:

```javascript
import { fetchAvailableAnimationStates } from 'sprite-ai';

const states = await fetchAvailableAnimationStates();
console.log(states); // ['idle', 'walk', 'run', 'attack', 'jump', 'fall', 'hurt', 'die']
```

### Fetching Available Sprite Styles

Get a list of all available sprite styles, top-notch:

```javascript
import { fetchAvailableSpriteStyles } from 'sprite-ai';

const styles = await fetchAvailableSpriteStyles();
console.log(styles); // ['pixel-art', 'vector', '3d', 'hand-drawn', 'anime']
```

## Next Steps

- Have a proper look at the documentation for each function for more detailed options
- Explore integrating the sprites with your game engine, jolly good
- Give different art styles and descriptions a go to find what works best for your game
